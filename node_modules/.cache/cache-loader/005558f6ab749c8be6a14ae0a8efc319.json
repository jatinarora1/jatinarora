{"remainingRequest":"/Users/inmatin/Desktop/jatinarora/node_modules/babel-loader/lib/index.js??ref--12-1!/Users/inmatin/Desktop/jatinarora/node_modules/@docusaurus/mdx-loader/src/index.js??ref--12-2!/Users/inmatin/Desktop/jatinarora/node_modules/@docusaurus/plugin-content-blog/lib/markdownLoader.js??ref--12-3!/Users/inmatin/Desktop/jatinarora/blog/2019-01-14-jwt-auth.md","dependencies":[{"path":"/Users/inmatin/Desktop/jatinarora/blog/2019-01-14-jwt-auth.md","mtime":1597636846609},{"path":"/Users/inmatin/Desktop/jatinarora/.docusaurus/docusaurus-plugin-content-blog/site-blog-2019-01-14-jwt-auth-md-935.json","mtime":1597652207468},{"path":"/Users/inmatin/Desktop/jatinarora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/inmatin/Desktop/jatinarora/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/inmatin/Desktop/jatinarora/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":499162500000},{"path":"/Users/inmatin/Desktop/jatinarora/node_modules/@docusaurus/plugin-content-blog/lib/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}