{"remainingRequest":"/Users/inmatin/Desktop/jatinarora/node_modules/babel-loader/lib/index.js??ref--12-1!/Users/inmatin/Desktop/jatinarora/node_modules/@docusaurus/mdx-loader/src/index.js??ref--12-2!/Users/inmatin/Desktop/jatinarora/node_modules/@docusaurus/plugin-content-blog/lib/markdownLoader.js??ref--12-3!/Users/inmatin/Desktop/jatinarora/blog/2020-04-19-rust-and-nodejs.md","dependencies":[{"path":"/Users/inmatin/Desktop/jatinarora/blog/2020-04-19-rust-and-nodejs.md","mtime":1597636846610},{"path":"/Users/inmatin/Desktop/jatinarora/.docusaurus/docusaurus-plugin-content-blog/site-blog-2020-04-19-rust-and-nodejs-md-132.json","mtime":1597652207468},{"path":"/Users/inmatin/Desktop/jatinarora/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/inmatin/Desktop/jatinarora/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/inmatin/Desktop/jatinarora/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":499162500000},{"path":"/Users/inmatin/Desktop/jatinarora/node_modules/@docusaurus/plugin-content-blog/lib/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}